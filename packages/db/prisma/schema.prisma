generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String?   @unique
  name          String?
  image         String?
  isAdmin       Boolean   @default(false)
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  providerAccountId String  @map("provider_account_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  expires      DateTime @map("expires_at")
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @map("expires_at")

  @@unique([identifier, token])
}

model MenuCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String     @unique
  description String?
  position    Int        @default(0)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  items       MenuItem[] @relation("CategoryItems")
}

model MenuItem {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  description String?
  price       Float
  image       String?
  position    Int          @default(0)
  isAvailable Boolean      @default(true)
  categoryName String      @map("category_name")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  category    MenuCategory @relation("CategoryItems", fields: [categoryName], references: [name])
  menus       Menu[]       @relation("MenusOnItems")
}

model Menu {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  description String?
  image       String?
  position    Int        @default(0)
  items       MenuItem[] @relation("MenusOnItems")
  isAvailable Boolean    @default(true)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
}
